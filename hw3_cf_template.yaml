AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud formation template for smart photo album
Parameters:
  BucketPrefix:
    Type: "String"
    Default: "cc-hw3"

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${BucketPrefix}-frontend-bucket"
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FrontendBucket
                - /*
      Bucket: !Ref FrontendBucket

  BackendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${BucketPrefix}-backend-bucket"
      AccessControl: Private

  CodelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${BucketPrefix}-codepipeline-bucket"
      AccessControl: Private

  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${BucketPrefix}-photos-bucket"
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt [IndexPhotoLambda, Arn]

  S3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: ["IndexPhotoLambda"]
    Properties:
      FunctionName:
        Fn::GetAtt:
          - IndexPhotoLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:s3:::${BucketPrefix}-photos-bucket"

  LexLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: ["SearchPhotoLambda"]
    Properties:
      FunctionName:
        Fn::GetAtt:
          - SearchPhotoLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: lex.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:lex:us-east-1:642881259315:intent:SearchIntent:*

  SmartAlbumRestAPI:
    Type: AWS::ApiGateway::RestApi
    DependsOn: ["SearchPhotoLambda", "IndexPhotoLambda"]
    Properties:
      Name: Smart Album API
      Description: An API for Photo Album
      Body:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 's3://hw3-resources/swagger.yaml'

  SmartAlbumRestAPIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref SmartAlbumRestAPI
      Description: Deployment to test stage
      StageName: test

  DeployFrontendCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_CLIENT_BUCKET
            Value: !Ref FrontendBucket
          - Name: API_GATEWAY
            Value: !Ref SmartAlbumRestAPI
      Name: frontend-pipeline-deploy
      QueuedTimeoutInMinutes: 480
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Deploying frontend to S3
                - aws apigateway get-sdk --rest-api-id $API_GATEWAY --stage-name test --sdk-type javascript sample.zip
                - unzip sample.zip && cp -r apiGateway-js-sdk/* web/assets/js/sdk
                - cd web && aws s3 cp . s3://$S3_CLIENT_BUCKET --recursive
          artifacts:
            files:
            - '**/*'
      TimeoutInMinutes: 60

  FrontendCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_CLIENT_BUCKET
            Value: !Ref FrontendBucket
      Name: frontend-pipeline-build
      QueuedTimeoutInMinutes: 480
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Installing packages for frontend
                - cd web && npm install
            build:
              commands:
                - echo Building frontend
                - npm run-script build
          artifacts:
            files:
              - '**/*'
      TimeoutInMinutes: 60

  BackendCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_CLIENT_BUCKET
            Value: !Ref BackendBucket
      Name: backend-pipeline-build
      QueuedTimeoutInMinutes: 480
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo Deploying backend to S3
                - cd app/LF1 && zip -r lf1.zip . && aws s3 cp lf1.zip s3://$S3_CLIENT_BUCKET
                - cd ../LF2 && zip -r lf2.zip . && aws s3 cp lf2.zip s3://$S3_CLIENT_BUCKET
                - aws lambda update-function-code --function-name index-photos --s3-bucket $S3_CLIENT_BUCKET --s3-key lf1.zip
                - aws lambda update-function-code --function-name search-photos --s3-bucket $S3_CLIENT_BUCKET --s3-key lf2.zip
          artifacts:
            files:
            - '**/*'
      TimeoutInMinutes: 60

  FrontendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodelineBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt FrontendPipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCode
              Configuration:
                Owner: vc-nyu
                Repo: SmartPhotoAlbum
                Branch: frontend
                PollForSourceChanges: false
                OAuthToken: 55afcc6195f4d6367c279effe2e22dbbf4f75936
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref FrontendCodeBuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: ClientBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ClientDeployStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: ClientBuild
              Configuration:
                ProjectName: !Ref DeployFrontendCodeBuildProject
              RunOrder: 1

  BackendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodelineBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt BackendPipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCode
              Configuration:
                Owner: vc-nyu
                Repo: SmartPhotoAlbum
                Branch: backend
                PollForSourceChanges: false
                OAuthToken: 55afcc6195f4d6367c279effe2e22dbbf4f75936
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: ClientDeployStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceCode
              Configuration:
                ProjectName: !Ref BackendCodeBuildProject
              RunOrder: 1

  FrontendGithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: 55afcc6195f4d6367c279effe2e22dbbf4f75936
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref FrontendPipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt FrontendPipeline.Version

  BackendGithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: 55afcc6195f4d6367c279effe2e22dbbf4f75936
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref BackendPipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt BackendPipeline.Version

  FrontendPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  BackendPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codedeploy.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  S3ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: s3_put_role

  LambdaProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda_execution_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: '*'
      RoleName: lambda_invocation_role

  IndexPhotoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonESFullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonLexFullAccess
      RoleName: hw3_lf1_role

  IndexPhotoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: hw3-resources
        S3Key: lf1.zip
      FunctionName: index-photos
      Handler: lambda_function.lambda_handler
      Role: !GetAtt IndexPhotoLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300

  SearchPhotoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonLexFullAccess
        - arn:aws:iam::aws:policy/AmazonESFullAccess
      RoleName: hw3_lf2_role

  SearchPhotoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: hw3-resources
        S3Key: lf2.zip
      FunctionName: search-photos
      Handler: lambda_function.lambda_handler
      Role: !GetAtt SearchPhotoLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300